[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Eman Ajmal",
    "section": "",
    "text": "This is Eman Ajmal’s webiste. I am a social analyst.\n\nplot(iris)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Eman Ajmal is a social analyst.\n\nplot(mtcars)"
  },
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "Project",
    "section": "",
    "text": "Eman Ajmal is a social analyst.\n\nplot(mtcars)"
  },
  {
    "objectID": "Assignment3.html",
    "href": "Assignment3.html",
    "title": "Assignment 3",
    "section": "",
    "text": "Write SQL codes to get a list of:\n\nStudents IDs (hint: from the takes relation)\n\n\n\nInstructors\n\n\n\nDepartments\n\n\n\n\n\nWrite in SQL codes to do following queries:\n\nFind the ID and name of each student who has taken at least one Comp. Sci. course; make sure there are no duplicate names in the result.\n\n\n\nAdd grades to the list\n\n\n\nFind the ID and name of each student who has not taken any course offered before 2017.\n\n\n\nFor each department, find the maximum salary of instructors in that department. You may assume that every department has at least one instructor.\n\n\n\nFind the lowest, across all departments, of the per-department maximum salary computed by the preceding query.\n\n\n\nAdd names to the list\n\n\n\n\n\nFind instructor (with name and ID) who has never given an A grade in any course she or he has taught. (Instructors who have never taught a course trivially satisfy this condition.)"
  },
  {
    "objectID": "Assignment3.html#question-2",
    "href": "Assignment3.html#question-2",
    "title": "Assignment 3",
    "section": "",
    "text": "Write SQL codes to get a list of:\n\nStudents IDs (hint: from the takes relation)\n\n\n\nInstructors\n\n\n\nDepartments"
  },
  {
    "objectID": "Assignment3.html#question-3",
    "href": "Assignment3.html#question-3",
    "title": "Assignment 3",
    "section": "",
    "text": "Write in SQL codes to do following queries:\n\nFind the ID and name of each student who has taken at least one Comp. Sci. course; make sure there are no duplicate names in the result.\n\n\n\nAdd grades to the list\n\n\n\nFind the ID and name of each student who has not taken any course offered before 2017.\n\n\n\nFor each department, find the maximum salary of instructors in that department. You may assume that every department has at least one instructor.\n\n\n\nFind the lowest, across all departments, of the per-department maximum salary computed by the preceding query.\n\n\n\nAdd names to the list"
  },
  {
    "objectID": "Assignment3.html#question-4",
    "href": "Assignment3.html#question-4",
    "title": "Assignment 3",
    "section": "",
    "text": "Find instructor (with name and ID) who has never given an A grade in any course she or he has taught. (Instructors who have never taught a course trivially satisfy this condition.)"
  },
  {
    "objectID": "Assignment1.html",
    "href": "Assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Name and describe three applications you have used that employed a database system to store and access persistent data (e.g., airlines, online trade, banking, university system).\n\n\n\nHow it Uses Databases: Stores customer data, transactions, and account details.\nReasoning: Ensures secure, fast, and reliable access to banking information.\n\n\n\n\n\nHow it Uses Databases: Manages product listings, customer orders, and payments.\nReasoning: Uses a relational database to store structured data and provide recommendations.\n\n\n\n\n\nHow it Uses Databases: Stores student records, enrollments, and grades.\nReasoning: Ensures students and faculty have real-time access to course materials and academic records.\n\n\n\n\n\nPropose three applications in domain projects (e.g., criminology, economics, brain science, etc.). Be sure to include: 1.Purpose 2.Functions 3.Simple interface design\n\n\n\nPurpose: Measures and tracks social well-being indicators like mental health, employment, and community engagement.\nFunctions:\n\nCollects survey responses on life satisfaction, stress levels, and social interactions.\nTracks changes in employment, education, and local crime rates.\nProvides visual reports and insights for policymakers and community leaders.\n\nSimple Interface Design: A dashboard displays key indicators like mental health scores, employment trends, and community engagement in charts and graphs. Users can fill out surveys to update data, and policymakers can generate reports with visual insights. The interface includes a homepage overview, survey page, and a report export option.\n\n\n\n\n\nPurpose: Analyzes public sentiment on social issues by gathering data from social media and news sources.\nFunctions:\n\nCollects and categorizes posts on topics like inequality, human rights, and policy changes.\nUses sentiment analysis to determine whether opinions are positive, negative, or neutral.\nGenerates reports on trending social issues over time.\n\nSimple Interface Design: Users enter keywords to analyze public sentiment from news and social media, displayed through a word cloud, sentiment pie chart, and regional heatmap. A live feed shows relevant posts, and a report generation page allows data exports. The interface is search-focused with real-time insights.\n\n\n\n\n\nPurpose: Tracks data on economic and social mobility to understand inequality trends in different regions.\nFunctions:\n\nStores data on income, education, and employment trends across communities.\nProvides comparison charts on social mobility rates based on location, gender, and ethnicity.\nRecommends policies and resources to improve access to opportunities.\n\nSimple Interface Design: An interactive heat map and dashboard display income trends, education levels, and employment data by region. Users can compare multiple areas, view bar charts, and access policy recommendations. The interface supports searching, visual comparisons, and report downloads.\n\n\n\n\nIf data can be retrieved efficiently and effectively, why is data mining needed?\nData mining is essential because it allows us to extract meaningful insights from large datasets beyond just retrieving stored data. Below are key reasons why data mining is needed:\n\n\n\n\nDatabases can retrieve data efficiently, but they don’t automatically find patterns or trends.\n\n\n\n\n\nData mining helps predict future trends based on historical data.\n\n\n\n\n\nBusinesses use data mining to make data-driven decisions rather than relying on intuition.\n\n\n\n\n\nBig data is too large and complex for traditional database queries alone. Data mining helps extract valuable insights from massive datasets.\n\n\n\n\n\nCompanies use data mining to gain a competitive edge by identifying market trends, customer preferences, and business risks.\n\n\n\n\n\nDescribe at least three tables that might be used to store information in a social network/social media system such as Twitter or Reddit.\nA social media platform like Twitter or Reddit would require multiple tables for structured data management. Below are three essential tables:\n\n\n\nStores information about users.\n\n\n\nColumn Name\nDescription\n\n\n\n\nUser ID\nUnique identifier for each user\n\n\nUsername\nDisplay name of the user\n\n\nEmail\nContact email\n\n\nPassword\nEncrypted password\n\n\nDate Joined\nDate when the user registered\n\n\n\n\n\n\n\n\nStores tweets or Reddit posts.\n\n\n\nColumn Name\nDescription\n\n\n\n\nPost ID\nUnique identifier for each post\n\n\nUser ID\nID of the user who posted\n\n\nPost Content\nText or media content\n\n\nCreated At\nTimestamp of post creation\n\n\nLikes Count\nNumber of likes\n\n\nComments Count\nNumber of comments\n\n\n\n\n\n\n\n\nStores relationships between users.\n\n\n\nColumn Name\nDescription\n\n\n\n\nFollower ID\nID of the user who follows\n\n\nFollowed ID\nID of the user being followed\n\n\nDate Followed\nTimestamp of when the follow occurred"
  },
  {
    "objectID": "Assignment1.html#question-1",
    "href": "Assignment1.html#question-1",
    "title": "Assignment 1",
    "section": "",
    "text": "Name and describe three applications you have used that employed a database system to store and access persistent data (e.g., airlines, online trade, banking, university system).\n\n\n\nHow it Uses Databases: Stores customer data, transactions, and account details.\nReasoning: Ensures secure, fast, and reliable access to banking information.\n\n\n\n\n\nHow it Uses Databases: Manages product listings, customer orders, and payments.\nReasoning: Uses a relational database to store structured data and provide recommendations.\n\n\n\n\n\nHow it Uses Databases: Stores student records, enrollments, and grades.\nReasoning: Ensures students and faculty have real-time access to course materials and academic records."
  },
  {
    "objectID": "Assignment1.html#question-2",
    "href": "Assignment1.html#question-2",
    "title": "Assignment 1",
    "section": "",
    "text": "Propose three applications in domain projects (e.g., criminology, economics, brain science, etc.). Be sure to include: 1.Purpose 2.Functions 3.Simple interface design\n\n\n\nPurpose: Measures and tracks social well-being indicators like mental health, employment, and community engagement.\nFunctions:\n\nCollects survey responses on life satisfaction, stress levels, and social interactions.\nTracks changes in employment, education, and local crime rates.\nProvides visual reports and insights for policymakers and community leaders.\n\nSimple Interface Design: A dashboard displays key indicators like mental health scores, employment trends, and community engagement in charts and graphs. Users can fill out surveys to update data, and policymakers can generate reports with visual insights. The interface includes a homepage overview, survey page, and a report export option.\n\n\n\n\n\nPurpose: Analyzes public sentiment on social issues by gathering data from social media and news sources.\nFunctions:\n\nCollects and categorizes posts on topics like inequality, human rights, and policy changes.\nUses sentiment analysis to determine whether opinions are positive, negative, or neutral.\nGenerates reports on trending social issues over time.\n\nSimple Interface Design: Users enter keywords to analyze public sentiment from news and social media, displayed through a word cloud, sentiment pie chart, and regional heatmap. A live feed shows relevant posts, and a report generation page allows data exports. The interface is search-focused with real-time insights.\n\n\n\n\n\nPurpose: Tracks data on economic and social mobility to understand inequality trends in different regions.\nFunctions:\n\nStores data on income, education, and employment trends across communities.\nProvides comparison charts on social mobility rates based on location, gender, and ethnicity.\nRecommends policies and resources to improve access to opportunities.\n\nSimple Interface Design: An interactive heat map and dashboard display income trends, education levels, and employment data by region. Users can compare multiple areas, view bar charts, and access policy recommendations. The interface supports searching, visual comparisons, and report downloads.\n\n\n\n\nIf data can be retrieved efficiently and effectively, why is data mining needed?\nData mining is essential because it allows us to extract meaningful insights from large datasets beyond just retrieving stored data. Below are key reasons why data mining is needed:\n\n\n\n\nDatabases can retrieve data efficiently, but they don’t automatically find patterns or trends.\n\n\n\n\n\nData mining helps predict future trends based on historical data.\n\n\n\n\n\nBusinesses use data mining to make data-driven decisions rather than relying on intuition.\n\n\n\n\n\nBig data is too large and complex for traditional database queries alone. Data mining helps extract valuable insights from massive datasets.\n\n\n\n\n\nCompanies use data mining to gain a competitive edge by identifying market trends, customer preferences, and business risks."
  },
  {
    "objectID": "Assignment1.html#question-6",
    "href": "Assignment1.html#question-6",
    "title": "Assignment 1",
    "section": "",
    "text": "Describe at least three tables that might be used to store information in a social network/social media system such as Twitter or Reddit.\nA social media platform like Twitter or Reddit would require multiple tables for structured data management. Below are three essential tables:\n\n\n\nStores information about users.\n\n\n\nColumn Name\nDescription\n\n\n\n\nUser ID\nUnique identifier for each user\n\n\nUsername\nDisplay name of the user\n\n\nEmail\nContact email\n\n\nPassword\nEncrypted password\n\n\nDate Joined\nDate when the user registered\n\n\n\n\n\n\n\n\nStores tweets or Reddit posts.\n\n\n\nColumn Name\nDescription\n\n\n\n\nPost ID\nUnique identifier for each post\n\n\nUser ID\nID of the user who posted\n\n\nPost Content\nText or media content\n\n\nCreated At\nTimestamp of post creation\n\n\nLikes Count\nNumber of likes\n\n\nComments Count\nNumber of comments\n\n\n\n\n\n\n\n\nStores relationships between users.\n\n\n\nColumn Name\nDescription\n\n\n\n\nFollower ID\nID of the user who follows\n\n\nFollowed ID\nID of the user being followed\n\n\nDate Followed\nTimestamp of when the follow occurred"
  },
  {
    "objectID": "Assignment2.html",
    "href": "Assignment2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Defines the structure of a relation, specifying its attributes and data types.\n\n\n\nA table containing rows that follow the schema.\n\n\n\nA specific snapshot of data in the relation at a given time.\n\n\n\n\n\n\n\n\n\n\nSchema\nRelation (Table)\nInstance\n\n\n\n\nStudent(ID, Name, Major, Year)\nA table storing student records\nA collection of student data at a specific moment\n\n\n\n\n\n\n\n\n\nA bank database schema includes the following entities:\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nbranch_name\nName of the branch\n\n\nbranch_city\nLocation of branch\n\n\nassets\nTotal branch assets\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nbranch_name\nAssociated branch (🔗 FK → Branch)\n\n\naccount_number\nUnique account ID\n\n\nbalance\nAccount balance\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nloan_number\nUnique loan ID\n\n\nbranch_name\nIssuing branch (🔗 FK → Branch)\n\n\namount\nLoan amount\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nCustomer ID (🔗 FK → Customer)\n\n\naccount_number\nLinked account number (🔗 FK → Account)\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nCustomer ID (🔗 FK → Customer)\n\n\nloan_number\nLinked loan number (🔗 FK → Loan)\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nUnique customer ID\n\n\ncst_name\nCustomer’s name\n\n\ncst_street\nStreet address\n\n\ncst_city\nCity of residence\n\n\n\n\n\n\n\nOne Branch → Many Accounts (branch_name as FK in Account)\n\nOne Branch → Many Loans (branch_name as FK in Loan)\n\nOne Customer → Many Accounts (via Depositor table)\n\nOne Account → Many Customers (Joint accounts, via Depositor)\n\nOne Customer → Many Loans (via Borrower table)\n\nOne Loan → Many Customers (Co-borrowers, via Borrower)\n\n\n\n\n\n\n\n\n\nBranch: branch_name\nAccount: account_number\nLoan: loan_number\nDepositor: (ID, account_number)\nBorrower: (ID, loan_number)\nCustomer: ID\n\n\n\n\n\nAccount: branch_name\nLoan: branch_name\nDepositor: ID, account_number\nBorrower: ID, loan_number"
  },
  {
    "objectID": "Assignment2.html#question-1-differences-between-relation-schema-relation-and-instance",
    "href": "Assignment2.html#question-1-differences-between-relation-schema-relation-and-instance",
    "title": "Assignment 2",
    "section": "",
    "text": "Defines the structure of a relation, specifying its attributes and data types.\n\n\n\nA table containing rows that follow the schema.\n\n\n\nA specific snapshot of data in the relation at a given time.\n\n\n\n\n\n\n\n\n\n\nSchema\nRelation (Table)\nInstance\n\n\n\n\nStudent(ID, Name, Major, Year)\nA table storing student records\nA collection of student data at a specific moment"
  },
  {
    "objectID": "Assignment2.html#question-2-schema-diagram-for-bank-database",
    "href": "Assignment2.html#question-2-schema-diagram-for-bank-database",
    "title": "Assignment 2",
    "section": "",
    "text": "A bank database schema includes the following entities:\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nbranch_name\nName of the branch\n\n\nbranch_city\nLocation of branch\n\n\nassets\nTotal branch assets\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nbranch_name\nAssociated branch (🔗 FK → Branch)\n\n\naccount_number\nUnique account ID\n\n\nbalance\nAccount balance\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nloan_number\nUnique loan ID\n\n\nbranch_name\nIssuing branch (🔗 FK → Branch)\n\n\namount\nLoan amount\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nCustomer ID (🔗 FK → Customer)\n\n\naccount_number\nLinked account number (🔗 FK → Account)\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nCustomer ID (🔗 FK → Customer)\n\n\nloan_number\nLinked loan number (🔗 FK → Loan)\n\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nID\nUnique customer ID\n\n\ncst_name\nCustomer’s name\n\n\ncst_street\nStreet address\n\n\ncst_city\nCity of residence\n\n\n\n\n\n\n\nOne Branch → Many Accounts (branch_name as FK in Account)\n\nOne Branch → Many Loans (branch_name as FK in Loan)\n\nOne Customer → Many Accounts (via Depositor table)\n\nOne Account → Many Customers (Joint accounts, via Depositor)\n\nOne Customer → Many Loans (via Borrower table)\n\nOne Loan → Many Customers (Co-borrowers, via Borrower)"
  },
  {
    "objectID": "Assignment2.html#question-3-primary-and-foreign-keys-for-the-bank-database",
    "href": "Assignment2.html#question-3-primary-and-foreign-keys-for-the-bank-database",
    "title": "Assignment 2",
    "section": "",
    "text": "Branch: branch_name\nAccount: account_number\nLoan: loan_number\nDepositor: (ID, account_number)\nBorrower: (ID, loan_number)\nCustomer: ID\n\n\n\n\n\nAccount: branch_name\nLoan: branch_name\nDepositor: ID, account_number\nBorrower: ID, loan_number"
  },
  {
    "objectID": "Assignment4.html",
    "href": "Assignment4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Difference between a weak and a strong entity set:\n\nA strong entity set can be identified uniquely by its own attributes, such as an Employee with an Employee ID.\nA weak entity set on the other hand, cannot be identified by its own attributes alone and depends on a strong entity (also known as the owner entity) for identification. An example could be a Dependent entity that relies on the Employee entity for its identification (e.g., an employee’s dependent might be identified by the Employee ID and Dependent’s name)."
  },
  {
    "objectID": "Assignment4.html#question-1",
    "href": "Assignment4.html#question-1",
    "title": "Assignment 4",
    "section": "",
    "text": "Difference between a weak and a strong entity set:\n\nA strong entity set can be identified uniquely by its own attributes, such as an Employee with an Employee ID.\nA weak entity set on the other hand, cannot be identified by its own attributes alone and depends on a strong entity (also known as the owner entity) for identification. An example could be a Dependent entity that relies on the Employee entity for its identification (e.g., an employee’s dependent might be identified by the Employee ID and Dependent’s name)."
  },
  {
    "objectID": "Assignment4.html#question-2",
    "href": "Assignment4.html#question-2",
    "title": "Assignment 4",
    "section": "Question 2",
    "text": "Question 2\nDesign an E-R diagram for keeping track of the scoring statistics of your favorite sports team. You should store the matches played, the scores in each match, the players in each match, and individual player scoring statistics for each match. Summary statistics should be modeled as derived attributes with an explanation as to how they are computed.\n\nDraw the E-R diagram using draw.io.\nExpand to all teams in the league (Hint: add team entity)"
  },
  {
    "objectID": "Assignment4.html#question-3",
    "href": "Assignment4.html#question-3",
    "title": "Assignment 4",
    "section": "Question 3",
    "text": "Question 3\nSQL exercise:\n\nWrite an SQL query using the university schema to find the ID of each student who has never taken a course at the university. Do this using no subqueries and no set operations (use an outer join).\n\n\n\nConsider the following database, write a query to find the ID of each employee with no manager. Note that an employee may simply have no manager listed or may have a null manager(use natural left outer join).\n\nSELECT e.ID\nFROM employee e\nOUTER JOIN manages m ON e.ID = m.ID\nWHERE m.manager_id IS NULL;"
  },
  {
    "objectID": "Assignment5.html",
    "href": "Assignment5.html",
    "title": "Assignment 5",
    "section": "",
    "text": "Question 1: E-R Diagram as a Graph\nAn E-R (Entity-Relationship) diagram can be viewed as a graph, where entities are nodes and relationships are edges. Understanding its structure helps ensure database integrity and effective design.\n\n\na) The graph is disconnected\nA disconnected graph means that some parts of the schema are isolated and do not connect to others. In terms of an enterprise schema, this implies that certain entities or relationships are not integrated with the rest of the database system.\nExample: Imagine we have a Doctor entity and a Patient entity, but no relationship (like Treats) connecting them. These two entities are disconnected in the E-R diagram.\nImplications: - Indicates missing relationships or a design flaw. - Can result in incomplete or difficult-to-query data. - Hurts the ability to enforce referential integrity.\n\n\nb) The graph has a cycle\nA cycle in an E-R diagram means that starting from one entity, you can follow a path of relationships and return to the same entity.\nExample: Doctor → Patient → Test → Doctor\nThis forms a loop (cycle) in the schema.\nImplications: - Not inherently wrong – cycles often represent real-world interconnectedness. - Can complicate queries, especially recursive ones. - May require careful normalization or handling to avoid data anomalies.\n\n\nQuestion 3: Why Do We Have Weak Entity Sets?\nWhile it’s possible to convert weak entity sets to strong ones by adding attributes, we still use weak entity sets in practice due to design clarity and efficiency.\nReasons We Use Weak Entity Sets:\n\nA weak entity cannot be uniquely identified by its own attributes.\nIt depends on a related strong entity for uniqueness.\n\nWhy Not Always Use Strong Entities?\n\nMaking weak entities strong can require adding redundant or artificial keys, which is not always natural.\nWeak entities simplify data modeling for real-world hierarchical relationships.\nHelps maintain referential integrity and logical clarity in the schema.\n\n\n\nQuestion 4\n\n\na: SQL Queries\nSchema:\nemployee(ID, name, street, city)\nworks(ID, company_id, salary)\ncompany(company_id, name, city)\nmanages(employee_id, manager_id)\n\nFind ID and name of employees who live in the same city as the location of their company:\n\nSELECT e.ID, e.name FROM employee AS e, works AS w, company AS c WHERE e.ID = w.ID AND w.company_id = c.company_id AND e.city = c.city;\n\nFind ID and name of employees who live on the same street and in the same city as their manager:\n\nSELECT e.ID, e.name\nFROM employee AS e, manages AS m, employee AS mngr\nWHERE e.ID = m.employee_id AND m.manager_id = mngr.ID\nAND e.city = mngr.city AND e.street = mngr.street;\n\nFind ID and name of employees who earn more than the average salary of all employees in their company:\n\nSELECT e.ID, e.name\nFROM employee AS e, works AS w\nWHERE e.ID = w.ID AND w.salary &gt; ( SELECT AVG(w2.salary)\nFROM works AS w2\nWHERE w2.company_id = w.company_id\n\n\nb: What’s wrong with this SQL query?\nSELECT name, title\nFROM instructor NATURAL JOIN teaches NATURAL JOIN section NATURAL JOIN course\nWHERE semester = ‘Spring’ AND year = 2017;\nProblem: This query uses NATURAL JOIN, which joins tables based on all columns with the same name. This can cause unintended matches, especially if tables have generic column names like ID or course_id.\nFix: Use explicit JOINs to clearly specify matching fields.\nCorrected Query:\nSELECT i.name, c.title\nFROM instructor AS i\nJOIN teaches AS t ON i.ID = t.ID\nJOIN section AS s ON t.course_id = s.course_id\nAND t.sec_id = s.sec_id\nAND t.semester = s.semester\nAND t.year = s.year JOIN course AS c ON s.course_id = c.course_id\nWHERE s.semester = ‘Spring’ AND s.year = 2017;"
  }
]